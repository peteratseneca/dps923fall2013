{\rtf1\ansi\ansicpg1252\cocoartf1187\cocoasubrtf340
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
\margl1440\margr1440\vieww16720\viewh11640\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural

\f0\fs28 \cf0 \
This is the "Search" example app. \
\
It was created with Xcode 4.4 for iOS 5.1 SDK in August 2012.\
\
Search teaches you how to add and work with a search bar on a table view.\
\
We will use the "dynamic instant search" technique, where results are updated with every keyboard tap. \
\
When the app loads for the first time, it loads a Core Data store with data that was screen-scraped from the ICT web site's "Staff List" page.\
It was then transformed into a plist using Microsoft Excel. We used three columns only - name, phone, office. \
Then, we used the CONCATENATE function to build a string that we could copy-paste into a plist file that was defined as an array. \
Here is the first row of the Excel worksheet; each cell/column is on a new line so you can clearly read it:\
\
Abesdris, Danny	\
33345	\
T2101	\
<dict><key>Name</key><string>Abesdris, Danny</string><key>Telephone</key><string>33345</string><key>Office</key><string>T2101</string></dict>\
\
The formula to build the string was:\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural
\cf0 =CONCATENATE("<dict><key>Name</key><string>",A1,"</string><key>Telephone</key><string>",B1,"</string><key>Office</key><string>",C1,"</string></\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural
\cf0 \
~~~~~~~~~~ \
\
Highlights - how to create this app:\
\
In storyboard, add a "Search Bar and Search Display Controller" object; drag it to a position between the nav bar and the table view. The storyboard editor should configure all the connections to your view controller.\
\
When "search" is active, the UISearchDisplayController creates a table view dynamically, as you type/enter text. This table view overlays the view controller's table view. \
\
In the table view controller, you need two private ivars:\
> a mutable array to hold the search results\
> a search display controller so you can get a reference to it later\
\
Here are the suggested changes for an awesome search experience:\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural

\b \cf0 @interface...
\b0 \
\
Make the view controller adopt these protocols:\
UISearchBarDelegate\
UISearchDisplayDelegate\
\

\b viewDidLoad:
\b0 \
\
Position the table view so that the search bar is initially scrolled above (hiding the search bar)\
\

\b numberOfSectionsInTableView:\
tableView:numberOfRowsInSection:\
tableView:cellForRowAtIndexPath:
\b0 \
\
In each of these methods, you need to know which table view (the view controller's table view, or the search display controller's table view) is asking the question. \
\
Therefore, you will need if-then-else logic to supply the right answer.\
\
In tableView:cellForRowAtIndexPath:, you will also need to add the "self." prefix to the "tableView" symbol in the UITableViewCell statement. \
\

\b prepareForSegue:sender:
\b0 \
\
As above, you need to know whether a search is active, so you can prepare the right data object. \
\

\b Search bar and search display controller delegate methods
\b0 \
\
Three methods need to be implemented. Each performs a specific task. \
\
searchDisplayControllerWillBeginSearch:\
> Good place to initialize the objects we'll need for the search\
\
searchBar:textDidChange:\
> This is called on every keyboard tap\
> This enables you to have dynamic instant search\
\
searchDisplayController:shouldReloadTableForSearchString:\
> Return YES for dynamic instant search\
\
.}